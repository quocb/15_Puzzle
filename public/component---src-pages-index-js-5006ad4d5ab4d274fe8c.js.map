{"version":3,"sources":["webpack:///./src/components/Box.js","webpack:///./src/pages/index.js"],"names":["Box","_ref","image","boxSize","row","col","canvas","useRef","useEffect","ctx","current","getContext","imageObj1","Image","src","onload","drawImage","react_default","a","createElement","Fragment","id","ref","width","height","Index","_useState","useState","boxesArr","setBoxesArr","_useState2","emptyPos","setEmptyPos","_useState3","clickedBox","setClickedBox","_useState4","gameWon","setGameWon","_useState5","showNums","setShowNums","_useState6","imgSrc","setImgSrc","getNewPos","oldPos","parseInt","Math","random","asyncToGenerator_default","regenerator_default","mark","_callee","result","wrap","_context","prev","next","axios","get","params","client_id","sent","data","urls","regular","stop","boxes","boxRow","NUM_COLS","push","key","console","log","boxProps","SIZE","components_Box","counter","emptyRow","emptyCol","newRow","newCol","scramble","ret","box1","box2","row1","col1","row2","col2","possibleRows","possibleCols","includes","concat","_ref2","swapBoxes","forEach","box","className","map","boxNum","onClick","e","currentTarget"],"mappings":"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","file":"component---src-pages-index-js-5006ad4d5ab4d274fe8c.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst Box = ({ image, boxSize, row, col }) => {\n  const canvas = useRef();\n  useEffect(() => {\n    const ctx = canvas.current.getContext('2d');\n    var imageObj1 = new Image();\n    imageObj1.src = image;\n    imageObj1.onload = function() {\n      ctx.drawImage(\n        imageObj1,\n        0 + col * boxSize,\n        0 + row * boxSize,\n        boxSize,\n        boxSize,\n        0,\n        0,\n        boxSize,\n        boxSize\n      );\n    };\n  }, []);\n\n  return (\n    <>\n      <canvas\n        id={`${row}${col}`}\n        ref={canvas}\n        width={boxSize}\n        height={boxSize}\n      />\n    </>\n  );\n};\n\nexport default Box;\n","import React, { useEffect, useState } from 'react';\nimport Box from './../components/Box';\nimport axios from 'axios';\n\n/**\n * Main app component. Renders boxes.\n */\nconst Index = () => {\n  const SIZE = 700; // height/width of board\n  const NUM_COLS = 4; // number of cols/rows to divide by\n  const SHUFFLE_BY = 30; // number of times to shuffle board\n  const [boxesArr, setBoxesArr] = useState([]); // state - arrays of all the boxes\n  const [emptyPos, setEmptyPos] = useState([3, 3]); // state - position of empty tile\n  const [clickedBox, setClickedBox] = useState(); // state - last clicked box\n  const [gameWon, setGameWon] = useState(false); // state - game won\n  const [showNums, setShowNums] = useState(false); // state - toggle showing numbers on tiles\n  const [imgSrc, setImgSrc] = useState(); // state - image src\n\n  /**\n   * getNewPos - Takes in a number 0-3 and returns a new valid position 0-3\n   */\n  const getNewPos = oldPos => {\n    // if pos is 3 or 0 there's only 1 way to go.\n    if (parseInt(oldPos) === 3) {\n      return 2;\n    } else if (parseInt(oldPos) === 0) {\n      return 1;\n    }\n    // pos is 1-2. flip coin to add or sub 1\n    if (Math.random() * 2 > 1) return parseInt(oldPos) + 1;\n    return parseInt(oldPos) - 1;\n  };\n\n  /**\n   * scramble - Takes the initial box array and shuffles it by\n   * moving the empty box around to ensure that it can be won\n   */\n  const scramble = boxes => {\n    let counter = 0;\n    let emptyRow = emptyPos[0];\n    let emptyCol = emptyPos[1];\n    let newRow = emptyRow;\n    let newCol = emptyCol;\n\n    while (counter++ < SHUFFLE_BY) {\n      // flip a coin to see if we're going to change row or col\n      if (Math.random() * 2 > 1) {\n        // change row\n        newRow = getNewPos(emptyRow);\n      } else {\n        // change col\n        newCol = getNewPos(emptyCol);\n      }\n\n      // swap empty col with new empty col\n      [boxes[emptyRow][emptyCol], boxes[newRow][newCol]] = [\n        boxes[newRow][newCol],\n        boxes[emptyRow][emptyCol]\n      ];\n\n      // set where empty is\n      emptyRow = newRow;\n      emptyCol = newCol;\n    }\n    setEmptyPos([newRow, newCol]);\n  };\n\n  /**\n   * isNextTo - Compares 2 boxes and returns true if they are next to each other\n   */\n  const isNextTo = (box1, box2) => {\n    // grab row and col from box 1 and box 2\n    const row1 = box1[0];\n    const col1 = box1[1];\n    const row2 = box2[0];\n    const col2 = box2[1];\n\n    // create arrays for positions that would be next to box\n    const possibleRows = [];\n    const possibleCols = [];\n\n    // fill in the possible pos array depending on current pos\n    if (row1 - 1 > -1) possibleRows.push(row1 - 1);\n    if (row1 + 1 < 4) possibleRows.push(row1 + 1);\n    if (col1 - 1 > -1) possibleCols.push(col1 - 1);\n    if (col1 + 1 < 4) possibleCols.push(col1 + 1);\n\n    // check to see if box 1 is next to box 2\n    if (row1 === row2 && possibleCols.includes(col2)) return true;\n    if (col1 === col2 && possibleRows.includes(row2)) return true;\n\n    // boxes not next to each other\n    return false;\n  };\n\n  /**\n   * didWin - Checks order of boxes and returns true if you won\n   */\n  const didWin = () => {\n    let ret = true;\n    boxesArr.forEach((boxRow, row) => {\n      boxRow.forEach((box, col) => {\n        if (\n          parseInt(box.key[0]) !== parseInt(row) ||\n          parseInt(box.key[1]) !== parseInt(col)\n        )\n          ret = false;\n      });\n    });\n    return ret;\n  };\n\n  /**\n   * swapBoxes - Swaps the position of the 2 boxes\n   */\n  const swapBoxes = (box1, box2) => {\n    const boxes = [...boxesArr];\n\n    [boxes[box1[0]][box1[1]], boxes[box2[0]][box2[1]]] = [\n      boxes[box2[0]][box2[1]],\n      boxes[box1[0]][box1[1]]\n    ];\n    setBoxesArr(boxes);\n    setEmptyPos([box1[0], box1[1]]);\n  };\n\n  /**\n   * useEffect (ComponentDidMount) - get a random image from unsplash\n   */\n  useEffect(() => {\n    (async () => {\n      // fetch a random image URL from unsplash\n      const result = await axios.get('https://api.unsplash.com/photos/random', {\n        params: {\n          client_id:\n            '0bda86a0ab72412afc278690e4e71349ce98c99d967379b519408c88934559bf'\n        }\n      });\n      // set the image url state variable\n      setImgSrc(result.data.urls.regular);\n    })();\n  }, []);\n\n  /**\n   * useEffect (ComponentDidUpdate) - creates array of 15 box + 1 empty when image is received\n   */\n  useEffect(() => {\n    if (imgSrc) {\n      // container to hold arrays\n      const boxes = [];\n\n      // loop through to create each row array\n      for (let row = 0; row < NUM_COLS; row += 1) {\n        const boxRow = [];\n        // loop through to fill boxes in the row\n        for (let col = 0; col < NUM_COLS; col += 1) {\n          if (row === NUM_COLS - 1 && col === NUM_COLS - 1) {\n            // render empty div for last box\n            boxRow.push(<div key={`${row}${col}`} id=\"empty-box\" />);\n          } else {\n            console.log(imgSrc);\n            // define props for a box so we can spread them.\n            const boxProps = {\n              row,\n              col,\n              setClickedBox,\n              showNums,\n              image: imgSrc,\n              boxSize: SIZE / NUM_COLS,\n              key: `${row}${col}`\n            };\n            boxRow.push(<Box {...boxProps} />);\n          }\n        }\n        boxes.push(boxRow);\n      }\n\n      // scramble the boxes\n      scramble(boxes);\n\n      // set the boxes into the state\n      setBoxesArr(boxes);\n    }\n  }, [imgSrc]);\n\n  /**\n   * useEffect (ComponentDidUpdate) - whenever a box is clicked check\n   * 1. if box is next to empty\n   * 2. swap box with empty\n   * 3. then check win condition\n   */\n  useEffect(() => {\n    if (clickedBox) {\n      if (isNextTo(clickedBox, emptyPos)) {\n        swapBoxes(clickedBox, emptyPos);\n        if (didWin()) {\n          setGameWon(true);\n          setShowNums(false);\n        }\n      }\n    }\n  }, [clickedBox]);\n\n  return (\n    <div id=\"main\">\n      {gameWon ? <h1 className=\"blinking\">You Won!</h1> : ''}\n      <div id=\"board\">\n        {boxesArr\n          ? boxesArr.map((boxRow, row) =>\n              boxRow.map((box, col) => {\n                const boxNum =\n                  parseInt(box.key[0]) * 4 + parseInt(box.key[1]) + 1;\n                return (\n                  <div\n                    key={box.key}\n                    id={`${row}${col}`}\n                    onClick={e => {\n                      setClickedBox([\n                        parseInt(e.currentTarget.id[0]),\n                        parseInt(e.currentTarget.id[1])\n                      ]);\n                    }}\n                  >\n                    {boxNum < 16 && showNums ? (\n                      <div className=\"box-number\">{boxNum}</div>\n                    ) : (\n                      ''\n                    )}\n\n                    {box}\n                  </div>\n                );\n              })\n            )\n          : ''}\n      </div>\n      <button onClick={() => setShowNums(prev => !prev)}>\n        {showNums ? 'No' : 'Show'} Numbers\n      </button>\n    </div>\n  );\n};\n\nexport default Index;\n"],"sourceRoot":""}